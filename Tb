module Testbench;

  reg reset;
  reg clk;
  reg [1:0] hours_tens;
  reg [3:0] hours_ones;
  reg [3:0] minutes_tens;
  reg [3:0] minutes_ones;
  reg load_time;
  reg load_alarm;
  reg stop_alarm;
  reg alarm_enable;

  // Outputs
  wire alarm_triggered;
  wire [1:0] displayed_hours_tens;
  wire [3:0] displayed_hours_ones;
  wire [3:0] displayed_minutes_tens;
  wire [3:0] displayed_minutes_ones;
  wire [3:0] displayed_seconds_tens;
  wire [3:0] displayed_seconds_ones;

  DigitalClock uut (
    .reset(reset),
    .clk(clk),
    .hours_tens(hours_tens),
    .hours_ones(hours_ones),
    .minutes_tens(minutes_tens),
    .minutes_ones(minutes_ones),
    .load_time(load_time),
    .load_alarm(load_alarm),
    .stop_alarm(stop_alarm),
    .alarm_enable(alarm_enable),
    .alarm_triggered(alarm_triggered),
    .displayed_hours_tens(displayed_hours_tens),
    .displayed_hours_ones(displayed_hours_ones),
    .displayed_minutes_tens(displayed_minutes_tens),
    .displayed_minutes_ones(displayed_minutes_ones),
    .displayed_seconds_tens(displayed_seconds_tens),
    .displayed_seconds_ones(displayed_seconds_ones)
  );

  initial begin
    clk = 0;
    forever #50000000 clk = ~clk;
  end

  initial begin
    // Initialize Inputs
    reset = 1;
    hours_tens = 1;
    hours_ones = 0;
    minutes_tens = 1;
    minutes_ones = 9;
    load_time = 0;
    load_alarm = 0;
    stop_alarm = 0;
    alarm_enable = 0;

    #1000000000;
    reset = 0;
    hours_tens = 1;
    hours_ones = 0;
    minutes_tens = 2;
    minutes_ones = 0;
    load_time = 0;
    load_alarm = 1;
    stop_alarm = 0;
    alarm_enable = 1;

    #1000000000;
    reset = 0;
    hours_tens = 1;
    hours_ones = 0;
    minutes_tens = 2;
    minutes_ones = 0;
    load_time = 0;
    load_alarm = 0;
    stop_alarm = 0;
    alarm_enable = 1;

    wait(alarm_triggered);
    #1000000000;
    #1000000000;
    #1000000000;
    #1000000000;
    #1000000000;
    #1000000000;
    stop_alarm = 1;
  end

endmodule
